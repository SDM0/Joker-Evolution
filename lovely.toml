[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


# Localization color

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "red = G.C.RED,"
position = "before"
payload = "evo = G.C.RARITY['evo'],"
match_indent = true


# Add amount tooltip to joker

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local loc_vars = {}"
position = "before"
payload = """
if has_evo(_c) and Evolution_tooltip_object and not Evolution_tooltip_object.infinifusion then info_queue[#info_queue + 1] = set_evo_tooltip(_c) end
"""
match_indent = true


# Add evolution attributes

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.added_to_deck = true"
position = "after"
payload = """
evo = self:get_card_evolution()
if self.ability.set == "Joker" and evo then
	self.ability.can_evolve = false
    self.ability.amount = evo.amount
end
"""
match_indent = true


# Add mod badge to evolved Joker

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if AUT.card_type == 'Enhanced' then card_type = localize{type = 'name_text', key = card.config.center.key, set = 'Enhanced'} end"
position = "before"
payload = """
if AUT.card_type == 'Joker' and is_evo(card.config.center) then card_type = ({['evo'] = 'Evolved'})[card.config.center.rarity] end
"""
match_indent = true


# Superstar main_end text

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Joker' then loc_vars = {self.ability.mult}"
position = "after"
payload = """
evo = self:get_card_evolution()
elseif self.ability.name == "Superstar" then
	local has_message= (G.GAME and self.area and (self.area == G.jokers))
    if has_message then
        local disableable = G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))
        main_end = {
            {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
                {n=G.UIT.C, config={ref_table = self, align = "m", colour = disableable and G.C.GREEN or G.C.RED, r = 0.05, padding = 0.06}, nodes={
                    {n=G.UIT.T, config={text = ' '..localize(disableable and 'k_active' or 'ph_no_boss_active')..' ',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.9}},
                }}
            }}
        }
    end
"""
match_indent = true


# Pre_reroll context

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "ease_dollars(-G.GAME.current_round.reroll_cost)"
position = "after"
payload = """
for i = 1, #G.jokers.cards do
    G.jokers.cards[i]:calculate_joker({je_prereroll_shop = true})
end
"""
match_indent = true


# "Ripple" joker scoring

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "scoring_hand[i] = G.play.cards[i]"
position = "after"
payload = """
        elseif next(find_joker('Ripple')) then
            scoring_hand[i] = G.play.cards[i]
"""
match_indent = false


# Adding global var to pass self inside generate_card_ui

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end)"
position = "before"
payload = """
Evolution_tooltip_object = self
"""
match_indent = true
